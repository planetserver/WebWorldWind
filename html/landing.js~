/*
 * Copyright (C) 2014 United States Government as represented by the Administrator of the
 * National Aeronautics and Space Administration. All Rights Reserved.
 */
/**
 * @version $Id: landing.js 3120 2015-05-28 02:32:45Z tgaskins $
 */

requirejs(['../src/WorldWind',
        './LayerManager',
        './CoordinateController',//ADD WMS LAYER
        '../src/gesture/TapRecognizer',
        ],
    function (ww,
              LayerManager,
              CoordinateController,
              TapRecognizer) {
        "use strict";

        WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);

        var wwd = new WorldWind.WorldWindow("canvasOne");

        var layers = [
        {layer: new WorldWind.BMNGLayer("moon_wgs84"), enabled: false},
        {layer: new WorldWind.BMNGLayer("mars_wgs84"), enabled: true},
        {layer: new WorldWind.BMNGOneImageLayer("images/earth.jpg", "Earth Image"), enabled: false}
        //{layer: new WorldWind.BMNGLayer("moon_wgs84"), enabled: true}//THATS THE WMS CONSTRUCTOR //CHANGE name

        //{layer: new WorldWind.BMNGOneImageLayer("../../images/moon.jpg", "Moon Image"), enabled: true}
        // {layer: new WorldWind.ViewConrolsLayer(wwd), enabled: true}
        ];

        for (var l = 0; l < layers.length; l++) {
            //console.log("layers[l].layer.enabled: " + layers[l].layer.enabled);
            //console.log("layers[l].enabled: " + layers[l].enabled);
            layers[l].layer.enabled = layers[l].enabled;
            wwd.addLayer(layers[l].layer);
        }

        // Create a layer to hold the surface shapes.
        var shapesLayer = new WorldWind.RenderableLayer("hrs00006fea_07_if173s_trr3_CAT_phot_p.img.tif");
        wwd.addLayer(shapesLayer);

        // Create a simple surface polygon, a triangle.
        var boundary = [];
         boundary.push(new WorldWind.Location(-47.548, 4.535)); 
        boundary.push(new WorldWind.Location(-47.552, 4.46 ));  
        boundary.push(new WorldWind.Location(-47.563, 4.389 )); 
        boundary.push(new WorldWind.Location(-47.575, 4.318)); 
        boundary.push(new WorldWind.Location(-47.574, 4.241)); 
        boundary.push(new WorldWind.Location(-47.521, 4.254)); 
        boundary.push(new WorldWind.Location(-47.489, 4.258)); 
        boundary.push(new WorldWind.Location(-47.457, 4.247)); 
        boundary.push(new WorldWind.Location(-47.409, 4.221)); 
        boundary.push(new WorldWind.Location(-47.407, 4.295)); 
        boundary.push(new WorldWind.Location(-47.404, 4.37)); 
        boundary.push(new WorldWind.Location(-47.384, 4.448)); 
        boundary.push(new WorldWind.Location(-47.366, 4.524)); 
        boundary.push(new WorldWind.Location(-47.441, 4.505)); 
        boundary.push(new WorldWind.Location(-47.472, 4.499 )); 
        boundary.push(new WorldWind.Location(-47.5 , 4.508)); 

	var boundary2 = [];
    boundary2.push(new WorldWind.Location(	-46.966	,	4.478	));
    boundary2.push(new WorldWind.Location(	-46.968	,	4.404	));
    boundary2.push(new WorldWind.Location(	-46.974	,	4.257	));
    boundary2.push(new WorldWind.Location(	-46.97	,	4.181	));
    boundary2.push(new WorldWind.Location(	-46.929	,	4.194	));
    boundary2.push(new WorldWind.Location(	-46.9	,	4.197	));
    boundary2.push(new WorldWind.Location(	-46.874	,	4.187	));
    boundary2.push(new WorldWind.Location(	-46.828	,	4.165	));
    boundary2.push(new WorldWind.Location(	-46.826	,	4.238	));
    boundary2.push(new WorldWind.Location(	-46.82	,	4.312	));
    boundary2.push(new WorldWind.Location(	-46.805	,	4.386	));
    boundary2.push(new WorldWind.Location(	-46.793	,	4.459	));
    boundary2.push(new WorldWind.Location(	-46.847	,	4.446	));
    boundary2.push(new WorldWind.Location(	-46.882	,	4.443	));
    boundary2.push(new WorldWind.Location(	-46.916	,	4.453	));

	var boundary3 = [];
boundary3.push(new WorldWind.Location(	-47.067	,	4.677	));
boundary3.push(new WorldWind.Location(	-47.073	,	4.457	));
boundary3.push(new WorldWind.Location(	-47.074	,	4.383	));
boundary3.push(new WorldWind.Location(	-47.034	,	4.395	));
boundary3.push(new WorldWind.Location(	-47.009	,	4.398	));
boundary3.push(new WorldWind.Location(	-46.985	,	4.386	));
boundary3.push(new WorldWind.Location(	-46.944	,	4.362	));
boundary3.push(new WorldWind.Location(	-46.924	,	4.512	));
boundary3.push(new WorldWind.Location(	-46.904	,	4.66	));
boundary3.push(new WorldWind.Location(	-46.958	,	4.648	));
boundary3.push(new WorldWind.Location(	-46.99	,	4.645	));
boundary3.push(new WorldWind.Location(	-47.022	,	4.654	));
boundary3.push(new WorldWind.Location(	-47.067	,	4.677	));
 var boundary4 = [];
boundary4.push(new WorldWind.Location(	-47.814	,	4.738	));
boundary4.push(new WorldWind.Location(	-47.817	,	4.665	));
boundary4.push(new WorldWind.Location(	-47.823	,	4.442	));
boundary4.push(new WorldWind.Location(	-47.776	,	4.453	));
boundary4.push(new WorldWind.Location(	-47.745	,	4.455	));
boundary4.push(new WorldWind.Location(	-47.715	,	4.444	));
boundary4.push(new WorldWind.Location(	-47.668	,	4.42	));
boundary4.push(new WorldWind.Location(	-47.671	,	4.494	));
boundary4.push(new WorldWind.Location(	-47.67	,	4.57	));
boundary4.push(new WorldWind.Location(	-47.661	,	4.645	));
boundary4.push(new WorldWind.Location(	-47.651	,	4.72	));
boundary4.push(new WorldWind.Location(	-47.696	,	4.706	));
boundary4.push(new WorldWind.Location(	-47.727	,	4.704	));
boundary4.push(new WorldWind.Location(	-47.763	,	4.714	));






        // Create and set attributes for it. The shapes below except the surface polyline use this same attributes
        // object. Real apps typically create new attributes objects for each shape unless they know the attributes
        // can be shared among shapes.
        var attributes = new WorldWind.ShapeAttributes(null);
        attributes.outlineColor = WorldWind.Color.RED;
        attributes.drawInterior = false;
        var shape = new WorldWind.SurfacePolygon(boundary, attributes);
        shapesLayer.addRenderable(shape);

var shape2 = new WorldWind.SurfacePolygon(boundary2, attributes);
    shapesLayer.addRenderable(shape2);
var shape3 = new WorldWind.SurfacePolygon(boundary3, attributes);
    shapesLayer.addRenderable(shape3);
var shape4 = new WorldWind.SurfacePolygon(boundary4, attributes);
    shapesLayer.addRenderable(shape4);
        //surface image test begin
        var surfaceImage2 = new WorldWind.SurfaceImage(new WorldWind.Sector(-47.57565, -47.36640, 4.220789, 4.535433),
        "http://212.201.45.10:8080/rasdaman/ows?query=for%20data%20in%20(%20esp_test_frt00003590_07_if164l_trr3%20)%20return%20encode(%20(int)(255%20/%20(max(%20(data.band_100%20!=%2065535)%20*%20data.band_100)%20-%20min(data.band_100)))%20*%20(data.band_100%20-%20min(data.band_100)),%20%22png%22,%22nodata=null%22)");

        // Add the surface images to a layer and the layer to the World Window's layer list.
        var surfaceImageLayer = new WorldWind.RenderableLayer();
        surfaceImageLayer.displayName = "Surface Images";
        surfaceImageLayer.addRenderable(surfaceImage2);
        wwd.addLayer(surfaceImageLayer);
        shapesLayer.addRenderable(surfaceImageLayer);
        //surface image test end


       var layerRegognizer = function (o) {
      // X and Y coordinates of a single click
      var x = o.clientX,
      y = o.clientY;
      //console.log("The coordinates are: " + x + " " + y);
      var pickList = wwd.pick(wwd.canvasCoordinates(x, y));
               console.log(pickList);
               console.log("The latitude value clicked is: " + pickList.objects[1].position.latitude);
               console.log("The longtitude value clicked is: " + pickList.objects[1].position.longitude);
               queryBuilder(pickList.objects[1].position.latitude, pickList.objects[1].position.longitude);
      console.log(pickList);

      for (var p = 0; p < pickList.objects.length; p++) {
        // console.log("pickList.objects[p]: " + pickList.objects[p]);
        // console.log("pickList.objects[p].userObject: " + pickList.objects[p].userObject);

        if(pickList.objects[p].userObject === surfaceImage2) {
          console.log("The Layer Clicked: " + pickList.objects[p].userObject);
          $('#right-layer-menu').addClass('open');
          $('#right-layer-menu-toggle').addClass('open');


        }
      }
    };
    var queryBuilder = function (latitude, longitude) {
		var PI = 3.141516;
                var r = 3396200;
                var cosOf0 = 1;
                var N = latitude * r * (PI/180);
                var E = longitude * cosOf0 * r * (PI/180);
		console.log("N: " +N);
		console.log("E: " +E);
                var query = "http://212.201.45.10:8080/rasdaman/ows?query=for%20c%20in%20(esp_test_frt00003590_07_if164l_trr3)%20return%20encode(c[%20N("
                                + N +":" + N + "),%20E(" + E + ":" + E + ")%20],%20%22csv%22)";

                console.log("Query for the click: " + query);
getQueryResponseAndSetChart(query);

            };

//Implementation function of the graph
var implementChart = function(valuesArray) {

	var chart = c3.generate({
		bindto: "#right-layer-menu",
	size: {
	        height: 500,
	        width: 300
    	},

	zoom: {
        enabled: true
   	 },

	    data: {
	      columns: [
	        valuesArray
	      ]
	    }
	});
}

// function for loading the graph library //d3js.org/d3.v3.min.js located in the index.html
function loadScriptAndCall(url, callback) {
    // Adding the script tag to the head as suggested before
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;

    // Then bind the event to the callback function.
    // There are several events for cross browser compatibility.
    script.onreadystatechange = callback;
    script.onload = callback;

    // Fire the loading
    head.appendChild(script);
}


function parseFloats(input) {
	var floatsArray = [];
	var helpString = input;

	var parsedFloat = parseFloat(helpString.slice(2, helpString.indexOf(" ")));

	while(helpString.indexOf(" ") != -1) {
		if(parsedFloat != 65535){
			floatsArray.push(parsedFloat);
		}
		helpString = helpString.slice(helpString.indexOf(" ") + 1, helpString.length);
		var parsedFloat = parseFloat(helpString.slice(0, helpString.indexOf(" ")));
	}
	return floatsArray;
}

function getQueryResponseAndSetChart(query) {
    var rawFile = new XMLHttpRequest();
    rawFile.open("GET", query, true);
    rawFile.onreadystatechange = function () {
        if(rawFile.readyState === 4) {
            if(rawFile.status === 200 || rawFile.status == 0) {
            	serverResponse = rawFile.responseText;
				var parsedFloats = [];
				parsedFloats = parseFloats(serverResponse);
				loadScriptAndCall("//d3js.org/d3.v3.min.js", implementChart(parsedFloats));
            }
        }
    }

    rawFile.send(null);
}


        // Listen for Mouse clicks and regognize layers
        wwd.addEventListener("click", layerRegognizer);


        wwd.redraw();



        document.getElementById("Mars").onclick = function() {
            var layers = [
              {layer: new WorldWind.BMNGLayer("moon_wgs84"), enabled: false},
              {layer: new WorldWind.BMNGLayer("mars_wgs84"), enabled: true},
              {layer: new WorldWind.BMNGOneImageLayer("images/earth.jpg", "Earth Image"), enabled: false}
                //{layer: new WorldWind.BMNGLayer("moon_wgs84"), enabled: true}//THATS THE WMS CONSTRUCTOR //CHANGE name

                //{layer: new WorldWind.BMNGOneImageLayer("../../images/moon.jpg", "Moon Image"), enabled: true}
                // {layer: new WorldWind.ViewConrolsLayer(wwd), enabled: true}
            ];

            for (var l = 0; l < layers.length; l++) {
                layers[l].layer.enabled = layers[l].enabled;
                wwd.addLayer(layers[l].layer);
            }

            wwd.redraw();
        }

        document.getElementById("Earth").onclick = function() {
            var layers = [
              {layer: new WorldWind.BMNGLayer("moon_wgs84"), enabled: false},
              {layer: new WorldWind.BMNGLayer("mars_wgs84"), enabled: false},
              {layer: new WorldWind.BMNGOneImageLayer("images/earth.jpg", "Earth Image"), enabled: true}
                //{layer: new WorldWind.BMNGLayer("moon_wgs84"), enabled: true}//THATS THE WMS CONSTRUCTOR //CHANGE name

                //{layer: new WorldWind.BMNGOneImageLayer("../../images/moon.jpg", "Moon Image"), enabled: true}
                // {layer: new WorldWind.ViewConrolsLayer(wwd), enabled: true}
            ];

            for (var l = 0; l < layers.length; l++) {
                layers[l].layer.enabled = layers[l].enabled;
                wwd.addLayer(layers[l].layer);
            }

            wwd.redraw();
        }

        document.getElementById("Moon").onclick = function() {
            var layers = [
              {layer: new WorldWind.BMNGLayer("moon_wgs84"), enabled: true},
              {layer: new WorldWind.BMNGLayer("mars_wgs84"), enabled: false},
              {layer: new WorldWind.BMNGOneImageLayer("images/earth.jpg", "Earth Image"), enabled: false}
              //  {layer: new WorldWind.BMNGLayer("moon_wgs84"), enabled: true}//THATS THE WMS CONSTRUCTOR //CHANGE name

                //{layer: new WorldWind.BMNGOneImageLayer("../../images/moon.jpg", "Moon Image"), enabled: true}
                // {layer: new WorldWind.ViewConrolsLayer(wwd), enabled: true}
            ];

            for (var l = 0; l < layers.length; l++) {
                layers[l].layer.enabled = layers[l].enabled;
                wwd.addLayer(layers[l].layer);
            }

            wwd.redraw();
        }





        // Create a layer manager for controlling layer visibility.
        var layerManager = new LayerManager(wwd);


        // Create a coordinate controller to update the coordinate overlay elements.
        var coordinateController = new CoordinateController(wwd);
    });
